/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type { NeonToken, NeonTokenInterface } from "../../contracts/NeonToken";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "subtractedValue",
        type: "uint256",
      },
    ],
    name: "decreaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "addedValue",
        type: "uint256",
      },
    ],
    name: "increaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "mint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "minted",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040523480156200001157600080fd5b506040518060400160405280600481526020017f4e656f6e000000000000000000000000000000000000000000000000000000008152506040518060400160405280600481526020017f4e454f4e00000000000000000000000000000000000000000000000000000000815250816003908051906020019062000096929190620000b8565b508060049080519060200190620000af929190620000b8565b505050620001cd565b828054620000c69062000168565b90600052602060002090601f016020900481019282620000ea576000855562000136565b82601f106200010557805160ff191683800117855562000136565b8280016001018555821562000136579182015b828111156200013557825182559160200191906001019062000118565b5b50905062000145919062000149565b5090565b5b80821115620001645760008160009055506001016200014a565b5090565b600060028204905060018216806200018157607f821691505b602082108114156200019857620001976200019e565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6115fe80620001dd6000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c8063313ce5671161008c57806395d89b411161006657806395d89b4114610228578063a457c2d714610246578063a9059cbb14610276578063dd62ed3e146102a6576100cf565b8063313ce567146101aa57806339509351146101c857806370a08231146101f8576100cf565b806306fdde03146100d4578063095ea7b3146100f25780631249c58b1461012257806318160ddd1461012c5780631e7269c51461014a57806323b872dd1461017a575b600080fd5b6100dc6102d6565b6040516100e99190611032565b60405180910390f35b61010c60048036038101906101079190610e3a565b610368565b6040516101199190611017565b60405180910390f35b61012a61038b565b005b610134610486565b6040516101419190611174565b60405180910390f35b610164600480360381019061015f9190610d86565b610490565b6040516101719190611174565b60405180910390f35b610194600480360381019061018f9190610deb565b6104a8565b6040516101a19190611017565b60405180910390f35b6101b26104d7565b6040516101bf919061118f565b60405180910390f35b6101e260048036038101906101dd9190610e3a565b6104e0565b6040516101ef9190611017565b60405180910390f35b610212600480360381019061020d9190610d86565b610517565b60405161021f9190611174565b60405180910390f35b61023061055f565b60405161023d9190611032565b60405180910390f35b610260600480360381019061025b9190610e3a565b6105f1565b60405161026d9190611017565b60405180910390f35b610290600480360381019061028b9190610e3a565b610668565b60405161029d9190611017565b60405180910390f35b6102c060048036038101906102bb9190610daf565b61068b565b6040516102cd9190611174565b60405180910390f35b6060600380546102e5906112a4565b80601f0160208091040260200160405190810160405280929190818152602001828054610311906112a4565b801561035e5780601f106103335761010080835404028352916020019161035e565b820191906000526020600020905b81548152906001019060200180831161034157829003601f168201915b5050505050905090565b600080610373610712565b905061038081858561071a565b600191505092915050565b670de0b6b3a7640000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410610414576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161040b906110d4565b60405180910390fd5b670de0b6b3a7640000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461046b91906111c6565b9250508190555061048433670de0b6b3a76400006108e5565b565b6000600254905090565b60056020528060005260406000206000915090505481565b6000806104b3610712565b90506104c0858285610a45565b6104cb858585610ad1565b60019150509392505050565b60006012905090565b6000806104eb610712565b905061050c8185856104fd858961068b565b61050791906111c6565b61071a565b600191505092915050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60606004805461056e906112a4565b80601f016020809104026020016040519081016040528092919081815260200182805461059a906112a4565b80156105e75780601f106105bc576101008083540402835291602001916105e7565b820191906000526020600020905b8154815290600101906020018083116105ca57829003601f168201915b5050505050905090565b6000806105fc610712565b9050600061060a828661068b565b90508381101561064f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161064690611134565b60405180910390fd5b61065c828686840361071a565b60019250505092915050565b600080610673610712565b9050610680818585610ad1565b600191505092915050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561078a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161078190611114565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156107fa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107f190611074565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040516108d89190611174565b60405180910390a3505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610955576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161094c90611154565b60405180910390fd5b61096160008383610d52565b806002600082825461097391906111c6565b92505081905550806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546109c891906111c6565b925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051610a2d9190611174565b60405180910390a3610a4160008383610d57565b5050565b6000610a51848461068b565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114610acb5781811015610abd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ab490611094565b60405180910390fd5b610aca848484840361071a565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610b41576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b38906110f4565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610bb1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ba890611054565b60405180910390fd5b610bbc838383610d52565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015610c42576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c39906110b4565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610cd591906111c6565b925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610d399190611174565b60405180910390a3610d4c848484610d57565b50505050565b505050565b505050565b600081359050610d6b8161159a565b92915050565b600081359050610d80816115b1565b92915050565b600060208284031215610d9857600080fd5b6000610da684828501610d5c565b91505092915050565b60008060408385031215610dc257600080fd5b6000610dd085828601610d5c565b9250506020610de185828601610d5c565b9150509250929050565b600080600060608486031215610e0057600080fd5b6000610e0e86828701610d5c565b9350506020610e1f86828701610d5c565b9250506040610e3086828701610d71565b9150509250925092565b60008060408385031215610e4d57600080fd5b6000610e5b85828601610d5c565b9250506020610e6c85828601610d71565b9150509250929050565b610e7f8161122e565b82525050565b6000610e90826111aa565b610e9a81856111b5565b9350610eaa818560208601611271565b610eb381611334565b840191505092915050565b6000610ecb6023836111b5565b9150610ed682611345565b604082019050919050565b6000610eee6022836111b5565b9150610ef982611394565b604082019050919050565b6000610f11601d836111b5565b9150610f1c826113e3565b602082019050919050565b6000610f346026836111b5565b9150610f3f8261140c565b604082019050919050565b6000610f57601c836111b5565b9150610f628261145b565b602082019050919050565b6000610f7a6025836111b5565b9150610f8582611484565b604082019050919050565b6000610f9d6024836111b5565b9150610fa8826114d3565b604082019050919050565b6000610fc06025836111b5565b9150610fcb82611522565b604082019050919050565b6000610fe3601f836111b5565b9150610fee82611571565b602082019050919050565b6110028161125a565b82525050565b61101181611264565b82525050565b600060208201905061102c6000830184610e76565b92915050565b6000602082019050818103600083015261104c8184610e85565b905092915050565b6000602082019050818103600083015261106d81610ebe565b9050919050565b6000602082019050818103600083015261108d81610ee1565b9050919050565b600060208201905081810360008301526110ad81610f04565b9050919050565b600060208201905081810360008301526110cd81610f27565b9050919050565b600060208201905081810360008301526110ed81610f4a565b9050919050565b6000602082019050818103600083015261110d81610f6d565b9050919050565b6000602082019050818103600083015261112d81610f90565b9050919050565b6000602082019050818103600083015261114d81610fb3565b9050919050565b6000602082019050818103600083015261116d81610fd6565b9050919050565b60006020820190506111896000830184610ff9565b92915050565b60006020820190506111a46000830184611008565b92915050565b600081519050919050565b600082825260208201905092915050565b60006111d18261125a565b91506111dc8361125a565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611211576112106112d6565b5b828201905092915050565b60006112278261123a565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b60005b8381101561128f578082015181840152602081019050611274565b8381111561129e576000848401525b50505050565b600060028204905060018216806112bc57607f821691505b602082108114156112d0576112cf611305565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000601f19601f8301169050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000600082015250565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b7f4f6e6c792031204e454f4e20746f6b656e207065722077616c6c657400000000600082015250565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b6115a38161121c565b81146115ae57600080fd5b50565b6115ba8161125a565b81146115c557600080fd5b5056fea26469706673582212202a077787bab9c936e9580658d254bbfb7d5db92342af35a82226fb27523d65e164736f6c63430008010033";

type NeonTokenConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: NeonTokenConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class NeonToken__factory extends ContractFactory {
  constructor(...args: NeonTokenConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<NeonToken> {
    return super.deploy(overrides || {}) as Promise<NeonToken>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): NeonToken {
    return super.attach(address) as NeonToken;
  }
  override connect(signer: Signer): NeonToken__factory {
    return super.connect(signer) as NeonToken__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): NeonTokenInterface {
    return new utils.Interface(_abi) as NeonTokenInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): NeonToken {
    return new Contract(address, _abi, signerOrProvider) as NeonToken;
  }
}
